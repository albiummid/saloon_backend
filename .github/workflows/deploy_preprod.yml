name: Backend Deploy Workflow

on:
  push:
    branches:
      - "main"
  pull_request:
    branches:
      - "main"

jobs:
  build_and_deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "npm"

      - name: Extract repository name
        run: echo "REPO_NAME=$(echo ${GITHUB_REPOSITORY##*/})" >> $GITHUB_ENV

      - name: Login to Container Registry
        run: docker login ${{ secrets.CONTAINER_REGISTRY }} -u nologin --password-stdin <<< ${{ secrets.REGISTRY_API_KEY }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Cache Docker layers
        uses: actions/cache@v3
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Build and Push Docker Image
        uses: docker/build-push-action@v5
        env:
          NODE_AUTH_TOKEN: ${{ secrets.GIT_TOKEN }}
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: |
            ${{ secrets.CONTAINER_REGISTRY }}/saloon-backend:${{ github.sha }}
            ${{ secrets.CONTAINER_REGISTRY }}/saloon-backend:latest
          build-args: |
            BUILDKIT_INLINE_CACHE=1
            NODE_ENV=production
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache-new

      - name: Move Docker cache
        run: |
          rm -rf /tmp/.buildx-cache
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache

  deploy:
    runs-on: ubuntu-latest
    needs: build_and_deploy
    steps:
      - name: Deploy to Server
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          script: |
            # Pull the latest image
            docker pull ${{ secrets.CONTAINER_REGISTRY }}/saloon-backend:latest

            # Stop and remove existing container if it exists
            docker stop saloon-backend || true
            docker rm saloon-backend || true

            # Run new container
            docker run -d \
              --name saloon-backend \
              -p 3000:3000 \
              -e MONGODB_URI=${{ secrets.MONGODB_URI }} \
              -e JWT_SECRET=${{ secrets.JWT_SECRET }} \
              -e CLOUDINARY_CLOUD_NAME=${{ secrets.CLOUDINARY_CLOUD_NAME }} \
              -e CLOUDINARY_API_KEY=${{ secrets.CLOUDINARY_API_KEY }} \
              -e CLOUDINARY_API_SECRET=${{ secrets.CLOUDINARY_API_SECRET }} \
              -e STRIPE_SECRET_KEY=${{ secrets.STRIPE_SECRET_KEY }} \
              ${{ secrets.CONTAINER_REGISTRY }}/saloon-backend:latest

            # Optional: Prune old images to save space
            docker image prune -f
