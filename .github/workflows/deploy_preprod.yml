name: PREPROD - Deploy image to container registry

env:
  DB_USER: root
  DB_USERNAME: root
  DB_PASSWORD: root
  DB_HOST: 127.0.0.1
  DB_PORT: 3306
  DB_DATABASE: babacoiffure_db
  STRIPE_KEY: ${{ secrets.STRIPE_KEY }}
  JWT_SECRET: KC6UyRtBW0Xm5yz4GMuWUwCY0hnTIA0NzwQBljqR2hyltM8d4O
  ENV_TYPE: DEV
  MINIO_USE_SSL: true
  Database_URI: mongodb://localhost:27017/saloon_db
  ACCESS_TOKEN_PRIVATE_KEY: ${{ secrets.ACCESS_TOKEN_PRIVATE_KEY }}
  ACCESS_TOKEN_PUBLIC_KEY: ${{ secrets.ACCESS_TOKEN_PUBLIC_KEY }}
  REFRESH_TOKEN_PRIVATE_KEY: ${{ secrets.REFRESH_TOKEN_PRIVATE_KEY }}
  REFRESH_TOKEN_PUBLIC_KEY: ${{ secrets.REFRESH_TOKEN_PUBLIC_KEY }}
  CLOUDINARY_CLOUD_NAME: ${{ secrets.CLOUDINARY_CLOUD_NAME }}
  CLOUDINARY_API_KEY: ${{ secrets.CLOUDINARY_API_KEY }}
  CLOUDINARY_API_SECRET: ${{ secrets.CLOUDINARY_API_SECRET }}
  CLOUDINARY_API_ENVIRONMENT_VARIABLE: ${{ secrets.CLOUDINARY_API_ENVIRONMENT_VARIABLE }}
  NODEMAILER_GMAIL_ID: ${{ secrets.NODEMAILER_GMAIL_ID }}
  NODEMAILER_GMAIL_APP_PASSWORD: ${{ secrets.NODEMAILER_GMAIL_APP_PASSWORD }}
  TOKEN_SECRET: ${{ secrets.TOKEN_SECRET }}
  STRIPE_SECRET_KEY: ${{ secrets.STRIPE_SECRET_KEY }}

on:
  push:
    branches:
      - "main"
    paths-ignore:
      - '**.md'
      - 'docs/**'
  pull_request:
    branches:
      - "main"
    paths-ignore:
      - '**.md'
      - 'docs/**'

# Concurrent workflow optimization
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  # test:
  #   runs-on: ubuntu-latest
  #
  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v2
  #
  #     - name: Start MySQL in Docker
  #       run: |
  #         docker run --name mysql -e MYSQL_ROOT_PASSWORD=${{ env.DB_PASSWORD }} -e MYSQL_DATABASE=${{ env.DB_DATABASE }} -p 3306:3306 -d mysql:8
  #
  #     - name: Wait for MySQL to be ready
  #       run: |
  #         for i in {1..60}; do
  #           if docker exec mysql mysqladmin ping -h127.0.0.1 -P3306 -uroot -p${{ env.DB_PASSWORD }} --silent; then
  #             echo "MySQL is ready!"
  #             break
  #           fi
  #           echo "Waiting for MySQL to be ready... Attempt $i"
  #           sleep 10
  #         done
  #
  #     - name: Set up Go
  #       uses: actions/setup-go@v2
  #       with:
  #         go-version: 1.23
  #
  #     - name: Cache Go modules
  #       uses: actions/cache@v3
  #       with:
  #         path: |
  #           ~/.cache/go-build
  #           ~/go/pkg/mod
  #         key: ${{ runner.os }}-go-${{ hashFiles('**/go.mod') }}
  #         restore-keys: |
  #           ${{ runner.os }}-go-
  #
  #     - name: Test
  #       run: go test -count=1 -v ./...
  #
  #     - name: Cleanup MySQL
  #       run: |
  #         docker stop mysql
  #         docker rm mysql

  deploy:
    # needs: test
    runs-on: ubuntu-latest
    services:
      mongodb:
        image: mongo:latest
        ports:
          - 27017:27017

    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 1  # Shallow clone for faster checkout
        
      - name: Setup dependency caching
        uses: actions/setup-node@v3
        with:
          node-version: 'lts/*'
          cache: 'npm'
          
      - name: Extract metadata
        id: meta
        run: |
          echo "REPO_NAME=$(echo ${{ github.repository }} | cut -d '/' -f 2)" >> $GITHUB_ENV
          echo "VERSION=preprod" >> $GITHUB_ENV
          echo "COMMIT_SHA=$(echo ${{ github.sha }} | cut -c1-7)" >> $GITHUB_ENV
          
      - name: Connect to docker registry
        run: docker login ${{ secrets.CONTAINER_REGISTERY }} -u nologin --password-stdin <<< ${{ secrets.SCW_SECRET_KEY }}
        
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          buildkitd-flags: --debug
        
      - name: Cache Docker layers
        uses: actions/cache@v3
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-
            
      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: |
            ${{ secrets.CONTAINER_REGISTERY }}/backend_v2:preprod
            ${{ secrets.CONTAINER_REGISTERY }}/backend_v2:${{ env.COMMIT_SHA }}
          platforms: linux/amd64
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache-new,mode=max
          build-args: |
            NODE_ENV=production
          provenance: false
          outputs: type=registry,compression=zstd
          no-cache-filters: ""

      - name: Move cache
        run: |
          rm -rf /tmp/.buildx-cache
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache

  update:
    runs-on: ubuntu-latest
    needs: deploy
    steps:
      - name: Use Scaleway CLI
        uses: scaleway/action-scw@v0
        id: cli
        with:
          save-config: true
          export-config: true
          version: v2.13.0
          access-key: ${{ secrets.SCW_ACCESS_KEY }}
          secret-key: ${{ secrets.SCW_SECRET_KEY }}
          default-project-id: ${{ secrets.SCW_DEFAULT_PROJECT_ID }}
          default-organization-id: ${{ secrets.SCW_DEFAULT_ORGANIZATION_ID }}
          args: container container deploy ${{ secrets.SERVERLESS_ID }} --timeout=5m
